// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb" // Specify the MongoDB database adapter
    url      = env("MONGO_URL")
}

model User {
    id    String  @id @default(auto()) @map("_id") @db.ObjectId
    // name type decorator defaultauto map-to-mongo-_id ??
    name  String?
    email String? @unique
    image String?

    // For Stripe
    customerId             String? //TODO:  should I add @unique @map(name:"stripe_customer_id")
    priceId                String? //TODO:  should I add @unique @map(name:"stripe_price_id")
    productId              String? //TODO:  ...
    stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
    // TODO: prefix all maps of stripe with "stripe"?
    emailVerified          DateTime?
    hashedPassword         String?
    confirmPassword        String?
    createdAt              DateTime  @default(now())
    updatedAt              DateTime  @updatedAt
    role                   UserRole  @default(USER)

    // messages Message[]
    settings Settings?
    Account  Account[]
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String // REVIEW:  what is the db.String decorator for?
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    // RELATIONS
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId]) // the combination of provider and providerAccountId must be unique
}

model VerificationToken {
    id         String   @id @default(cuid()) @map("_id")
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}

enum UserRole {
    ADMIN
    USER
}

model Settings {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // RELATIONS
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique @db.ObjectId

    // Settings fields
    darkMode Boolean @default(false)
}
